{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "80eed22e-566c-4c92-8ab0-76ced621d9d9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ðŸŽµ Enter the song details below to get metadata\n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter Artist Name:  BTS\n",
      "Enter Song Name:  ON\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "ðŸŽ§ Song Metadata:\n",
      "\n",
      "{\n",
      "    \"artist\": \"BTS\",\n",
      "    \"track\": \"ON\",\n",
      "    \"musicbrainz\": {\n",
      "        \"recording_id\": \"daee9b09-d34a-4594-82ed-b11808275ace\",\n",
      "        \"title\": \"ON\",\n",
      "        \"artist\": \"BTS\",\n",
      "        \"artist_id\": \"0d79fe8e-ba27-4859-bb8c-2f255f346853\",\n",
      "        \"album\": \"\",\n",
      "        \"album_id\": \"\",\n",
      "        \"release_date\": \"\",\n",
      "        \"country\": \"\",\n",
      "        \"disambiguation\": \"\",\n",
      "        \"length\": 355000,\n",
      "        \"track_number\": \"\",\n",
      "        \"external_links\": {\n",
      "            \"artist_links\": {\n",
      "                \"allmusic\": \"https://www.allmusic.com/artist/mn0003136056\",\n",
      "                \"bandsintown\": \"https://www.bandsintown.com/a/695158\",\n",
      "                \"discogs\": \"https://www.discogs.com/artist/5034422\",\n",
      "                \"free streaming\": \"https://www.deezer.com/artist/6982223\",\n",
      "                \"image\": \"https://commons.wikimedia.org/wiki/File:Bangtan_Boys_in_October_2013.jpg\",\n",
      "                \"IMDb\": \"https://www.imdb.com/name/nm7808003/\",\n",
      "                \"last.fm\": \"https://www.last.fm/music/%EB%B0%A9%ED%83%84%EC%86%8C%EB%85%84%EB%8B%A8\",\n",
      "                \"lyrics\": \"https://www.musixmatch.com/artist/BTS\",\n",
      "                \"official homepage\": \"http://cafe.daum.net/BANGTAN\",\n",
      "                \"other databases\": \"https://www.worldcat.org/identities/lccn-no2017138930\",\n",
      "                \"purchase for download\": \"https://www.melon.com/artist/detail.htm?artistId=672375\",\n",
      "                \"secondhandsongs\": \"https://secondhandsongs.com/artist/145300\",\n",
      "                \"social network\": \"https://www.instagram.com/bts.bighitofficial/\",\n",
      "                \"songkick\": \"https://www.songkick.com/artists/8268208\",\n",
      "                \"soundcloud\": \"https://soundcloud.com/bangtan\",\n",
      "                \"streaming\": \"https://www.melon.com/artist/detail.htm?artistId=672375\",\n",
      "                \"VIAF\": \"http://viaf.org/viaf/916150943133426760004\",\n",
      "                \"wikidata\": \"https://www.wikidata.org/wiki/Q13580495\",\n",
      "                \"youtube\": \"https://www.youtube.com/channel/UCLkAepWjdylmXSltofFvsYQ\"\n",
      "            },\n",
      "            \"recording_links\": {\n",
      "                \"free streaming\": \"https://www.youtube.com/watch?v=mPVDGOVjRQ0\"\n",
      "            }\n",
      "        }\n",
      "    },\n",
      "    \"lastfm\": {\n",
      "        \"tags\": [\n",
      "            \"bots\",\n",
      "            \"Kpop\",\n",
      "            \"bts\",\n",
      "            \"black metal\",\n",
      "            \"pop\"\n",
      "        ],\n",
      "        \"wiki\": {\n",
      "            \"published\": \"21 Feb 2020, 17:00\",\n",
      "            \"summary\": \"\\\"ON\\\" is a song by BTS. It was released on February 21, 2020. It serves as the title track and appears as the eleventh track for their fourth studio album Map of the Soul: 7. A remixed version featuring Australian singer Sia was released the same day in the digital version of their fourth studio album.\\nThis song also has a Japanese version featured in their fourth Japanese studio album Map of the Soul: 7 ~The Journey~.\\n\\n\\u2014Awards and nominations\\u2014 <a href=\\\"http://www.last.fm/music/BTS/_/ON\\\">Read more on Last.fm</a>.\",\n",
      "            \"content\": \"\\\"ON\\\" is a song by BTS. It was released on February 21, 2020. It serves as the title track and appears as the eleventh track for their fourth studio album Map of the Soul: 7. A remixed version featuring Australian singer Sia was released the same day in the digital version of their fourth studio album.\\nThis song also has a Japanese version featured in their fourth Japanese studio album Map of the Soul: 7 ~The Journey~.\\n\\n\\u2014Awards and nominations\\u2014\\n\\n\\u2014Music program awards\\u2014\\nSong\\tProgram\\tDate\\n\\\"ON\\\"\\tMusic Bank (KBS)\\tFebruary 28, 2020\\nMarch 6, 2020\\nMarch 13, 2020\\nMarch 20, 2020\\nShow! Music Core (MBC)\\tFebruary 29, 2020\\nMarch 7, 2020\\nMarch 14, 2020\\nMarch 21, 2020\\nMarch 28, 2020\\nInkigayo (SBS)\\tMarch 1, 2020\\nMarch 8, 2020\\nMarch 15, 2020\\nShow Champion (MBC Music)\\tMarch 4, 2020\\nMarch 11, 2020\\nMarch 18, 2020\\nM Countdown (Mnet)\\tMarch 5, 2020\\n\\n\\n\\u2014Editions\\u2014\\nLimited Edition 7\\\" Vinyl [Vinyl] (June 11, 2020)\\n\\n\\u2014Tracklist\\u2014\\nLimited Edition 7\\\" Vinyl\\nA-side\\n1.ON\\nB-side\\n1.ON (feat. Sia) <a href=\\\"http://www.last.fm/music/BTS/_/ON\\\">Read more on Last.fm</a>. User-contributed text is available under the Creative Commons By-SA License; additional terms may apply.\"\n",
      "        },\n",
      "        \"similar_tracks\": []\n",
      "    },\n",
      "    \"genius\": {\n",
      "        \"title\": \"BTS - ON (English Translation)\",\n",
      "        \"artist\": \"Genius English Translations\",\n",
      "        \"lyrics\": \"\",\n",
      "        \"url\": \"https://genius.com/Genius-english-translations-bts-on-english-translation-lyrics\",\n",
      "        \"album\": \"BTS - Proof (English Translation)\",\n",
      "        \"release_date\": \"2020-02-21\",\n",
      "        \"song_art_image_url\": \"https://images.genius.com/41ae07b40e80b9ff97955bc41cbabfb2.1000x1000x1.jpg\",\n",
      "        \"annotations\": [],\n",
      "        \"verified\": false\n",
      "    }\n",
      "}\n",
      "\n",
      "âœ… Metadata saved to 'BTS_ON_metadata.json'\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "\n",
    "LASTFM_API_KEY = \"da87e77d2348b4b9227b38b60d31f7e9\"\n",
    "GENIUS_ACCESS_TOKEN = \"15TK9a5jJZpzxaxn39KcMjyrjr08ArZEllCdfYOe0E16mxjTs7x7BsmU-v7TLvBO\"\n",
    "\n",
    "import requests\n",
    "\n",
    "def search_musicbrainz(artist, track):\n",
    "    base_url = \"https://musicbrainz.org/ws/2/recording/\"\n",
    "    query = f'artist:\"{artist}\" AND recording:\"{track}\"'\n",
    "    params = {\n",
    "        \"query\": query,\n",
    "        \"fmt\": \"json\",\n",
    "        \"limit\": 5\n",
    "    }\n",
    "    headers = {\n",
    "        \"User-Agent\": \"SongMetadataApp/1.0 (your-email@example.com)\"\n",
    "    }\n",
    "\n",
    "    try:\n",
    "        response = requests.get(base_url, params=params, headers=headers)\n",
    "        data = response.json()\n",
    "\n",
    "        for rec in data.get(\"recordings\", []):\n",
    "            media = rec.get(\"releases\", [])[0] if rec.get(\"releases\") else {}\n",
    "            release_event = media.get(\"release-events\", [{}])[0] if media else {}\n",
    "\n",
    "            recording_id = rec[\"id\"]\n",
    "            artist_info = rec[\"artist-credit\"][0][\"artist\"]\n",
    "            artist_id = artist_info[\"id\"]\n",
    "\n",
    "            result = {\n",
    "                \"recording_id\": recording_id,\n",
    "                \"title\": rec.get(\"title\"),\n",
    "                \"artist\": artist_info.get(\"name\"),\n",
    "                \"artist_id\": artist_id,\n",
    "                \"album\": media.get(\"title\", \"\"),\n",
    "                \"album_id\": media.get(\"id\", \"\"),\n",
    "                \"release_date\": release_event.get(\"date\", \"\"),\n",
    "                \"country\": release_event.get(\"area\", {}).get(\"iso-3166-1-codes\", [\"\"])[0],\n",
    "                \"disambiguation\": rec.get(\"disambiguation\", \"\"),\n",
    "                \"length\": rec.get(\"length\", 0),\n",
    "                \"track_number\": media.get(\"media\", [{}])[0].get(\"track\", [{}])[0].get(\"number\", \"\") if media.get(\"media\") else \"\",\n",
    "                \"external_links\": {\n",
    "                    \"artist_links\": get_external_links(\"artist\", artist_id),\n",
    "                    \"recording_links\": get_external_links(\"recording\", recording_id)\n",
    "                }\n",
    "            }\n",
    "\n",
    "            return result\n",
    "\n",
    "        return {\"error\": \"No suitable recording found.\"}\n",
    "\n",
    "    except Exception as e:\n",
    "        return {\"error\": str(e)}\n",
    "\n",
    "def get_external_links(entity_type, mbid):\n",
    "    \"\"\"\n",
    "    Fetch external URLs like Wikipedia, Spotify, YouTube, etc.\n",
    "    \"\"\"\n",
    "    url = f\"https://musicbrainz.org/ws/2/{entity_type}/{mbid}\"\n",
    "    params = {\n",
    "        \"fmt\": \"json\",\n",
    "        \"inc\": \"url-rels\"\n",
    "    }\n",
    "    headers = {\n",
    "        \"User-Agent\": \"SongMetadataApp/1.0 (your-email@example.com)\"\n",
    "    }\n",
    "\n",
    "    try:\n",
    "        response = requests.get(url, params=params, headers=headers)\n",
    "        data = response.json()\n",
    "        links = {}\n",
    "\n",
    "        for rel in data.get(\"relations\", []):\n",
    "            rel_type = rel.get(\"type\")\n",
    "            href = rel.get(\"url\", {}).get(\"resource\")\n",
    "            if rel_type and href:\n",
    "                links[rel_type] = href\n",
    "\n",
    "        return links\n",
    "    except:\n",
    "        return {}\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def search_lastfm(artist, track):\n",
    "    base_url = \"http://ws.audioscrobbler.com/2.0/\"\n",
    "    params = {\n",
    "        \"method\": \"track.getInfo\",\n",
    "        \"artist\": artist,\n",
    "        \"track\": track,\n",
    "        \"api_key\": LASTFM_API_KEY,\n",
    "        \"format\": \"json\"\n",
    "    }\n",
    "    response = requests.get(base_url, params=params).json()\n",
    "    track_info = response.get(\"track\", {})\n",
    "\n",
    "    tags = [tag[\"name\"] for tag in track_info.get(\"toptags\", {}).get(\"tag\", [])]\n",
    "    wiki = track_info.get(\"wiki\", {})\n",
    "    summary = wiki.get(\"summary\", \"\")\n",
    "    content = wiki.get(\"content\", \"\")\n",
    "\n",
    "    return {\n",
    "        \"tags\": tags,\n",
    "        \"wiki\": {\n",
    "            \"published\": wiki.get(\"published\", \"\"),\n",
    "            \"summary\": summary,\n",
    "            \"content\": content\n",
    "        },\n",
    "        \"similar_tracks\": []\n",
    "    }\n",
    "\n",
    "def search_genius(artist, track):\n",
    "    headers = {\"Authorization\": f\"Bearer {GENIUS_ACCESS_TOKEN}\"}\n",
    "    search_url = \"https://api.genius.com/search\"\n",
    "    params = {\"q\": f\"{artist} {track}\"}\n",
    "    response = requests.get(search_url, params=params, headers=headers).json()\n",
    "\n",
    "    hits = response.get(\"response\", {}).get(\"hits\", [])\n",
    "    if not hits:\n",
    "        return {}\n",
    "\n",
    "    song_id = hits[0][\"result\"][\"id\"]\n",
    "    song_url = f\"https://api.genius.com/songs/{song_id}\"\n",
    "    song_data = requests.get(song_url, headers=headers).json()[\"response\"][\"song\"]\n",
    "\n",
    "    lyrics_url = song_data[\"url\"]\n",
    "    lyrics = scrape_lyrics(lyrics_url)\n",
    "\n",
    "    return {\n",
    "        \"title\": song_data[\"title\"],\n",
    "        \"artist\": song_data[\"primary_artist\"][\"name\"],\n",
    "        \"lyrics\": lyrics,\n",
    "        \"url\": lyrics_url,\n",
    "        \"album\": song_data.get(\"album\", {}).get(\"name\", \"Unknown\"),\n",
    "        \"release_date\": song_data.get(\"release_date\", \"Unknown\"),\n",
    "        \"song_art_image_url\": song_data.get(\"song_art_image_url\", \"\"),\n",
    "        \"annotations\": [],\n",
    "        \"verified\": song_data.get(\"verified\", False)\n",
    "    }\n",
    "\n",
    "def scrape_lyrics(url):\n",
    "    page = requests.get(url)\n",
    "    soup = BeautifulSoup(page.text, \"html.parser\")\n",
    "    lyrics = \"\"\n",
    "    for tag in soup.find_all(\"div\", class_=\"Lyrics__Container-sc-1ynbvzw-6\"):\n",
    "        lyrics += tag.get_text(separator=\"\\n\")\n",
    "    return lyrics.strip()\n",
    "\n",
    "def get_song_metadata(artist, track):\n",
    "    return {\n",
    "        \"artist\": artist,\n",
    "        \"track\": track,\n",
    "        \"musicbrainz\": search_musicbrainz(artist, track),\n",
    "        \"lastfm\": search_lastfm(artist, track),\n",
    "        \"genius\": search_genius(artist, track)\n",
    "    }\n",
    "\n",
    "# ----------- User Input Part -----------\n",
    "if __name__ == \"__main__\":\n",
    "    print(\"ðŸŽµ Enter the song details below to get metadata\\n\")\n",
    "    artist = input(\"Enter Artist Name: \").strip()\n",
    "    track = input(\"Enter Song Name: \").strip()\n",
    "\n",
    "    metadata = get_song_metadata(artist, track)\n",
    "\n",
    "    import json\n",
    "    print(\"\\nðŸŽ§ Song Metadata:\\n\")\n",
    "    print(json.dumps(metadata, indent=4))\n",
    "\n",
    "\n",
    "# Save to JSON file\n",
    "filename = f\"{artist}_{track}_metadata.json\".replace(\" \", \"_\")\n",
    "with open(filename, \"w\", encoding=\"utf-8\") as f:\n",
    "    json.dump(metadata, f, indent=4, ensure_ascii=False)\n",
    "\n",
    "print(f\"\\nâœ… Metadata saved to '{filename}'\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3df1c7eb-0b05-4274-8aa0-fff84114dcb5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
